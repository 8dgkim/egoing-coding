{"version":3,"file":"barchart.js","sourceRoot":"","sources":["../../src/render/barchart.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport embed, {Mode, Result as EmbedRes, VisualizationSpec} from 'vega-embed';\n\nimport {BarChartOpts, Drawable} from '../types';\nimport {getDefaultHeight, getDefaultWidth} from '../util/dom';\nimport {getDrawArea, nextFrame, shallowEquals} from './render_utils';\n\n/**\n * Renders a barchart.\n *\n * ```js\n * const data = [\n *   { index: 0, value: 50 },\n *   { index: 1, value: 100 },\n *   { index: 2, value: 150 },\n *  ];\n *\n * // Render to visor\n * const surface = { name: 'Bar chart', tab: 'Charts' };\n * tfvis.render.barchart(surface, data);\n * ```\n *\n * @param data Data in the following format, (an array of objects)\n *    `[ {index: number, value: number} ... ]`\n *\n * @returns Promise - indicates completion of rendering\n *\n * @doc {heading: 'Charts', namespace: 'render'}\n */\nexport async function barchart(\n    container: Drawable, data: Array<{index: number; value: number;}>,\n    opts: BarChartOpts = {}): Promise<void> {\n  const drawArea = getDrawArea(container);\n  const values = data;\n  const options = Object.assign({}, defaultOpts, opts);\n\n  // If we have rendered this chart before with the same options we can do a\n  // data only update, else  we do a regular re-render.\n  if (instances.has(drawArea)) {\n    const instanceInfo = instances.get(drawArea);\n    if (shallowEquals(options, instanceInfo.lastOptions)) {\n      await nextFrame();\n      const view = instanceInfo.view;\n      const changes = view.changeset().remove(() => true).insert(values);\n      await view.change('values', changes).runAsync();\n      return;\n    }\n  }\n\n  const {xLabel, yLabel, xType, yType} = options;\n\n  let xAxis: {}|null = null;\n  if (xLabel != null) {\n    xAxis = {title: xLabel};\n  }\n\n  let yAxis: {}|null = null;\n  if (yLabel != null) {\n    yAxis = {title: yLabel};\n  }\n\n  const embedOpts = {\n    actions: false,\n    mode: 'vega-lite' as Mode,\n    defaultStyle: false,\n  };\n\n  let colorEncoding;\n\n  if (options.color != null) {\n    if (Array.isArray(options.color)) {\n      colorEncoding = {\n        'field': 'index',\n        'type': 'nominal',\n        'scale': {\n          'range': options.color,\n        }\n      };\n    } else {\n      colorEncoding = {'value': options.color};\n    }\n  } else {\n    colorEncoding = {'value': '#4C78A0'};\n  }\n\n  const spec: VisualizationSpec = {\n    'width': options.width || getDefaultWidth(drawArea),\n    'height': options.height || getDefaultHeight(drawArea),\n    'padding': 0,\n    'autosize': {\n      'type': 'fit',\n      'contains': 'padding',\n      'resize': true,\n    },\n    'config': {\n      'axis': {\n        'labelFontSize': options.fontSize,\n        'titleFontSize': options.fontSize,\n      },\n      'text': {'fontSize': options.fontSize},\n      'legend': {\n        'labelFontSize': options.fontSize,\n        'titleFontSize': options.fontSize,\n      }\n    },\n    'data': {'values': values, 'name': 'values'},\n    'mark': {\n      'type': 'bar',\n      'tooltip': true,\n    },\n    'encoding': {\n      'x': {'field': 'index', 'type': xType, 'axis': xAxis},\n      'y': {'field': 'value', 'type': yType, 'axis': yAxis},\n      'color': colorEncoding,\n    },\n  } as VisualizationSpec;\n\n  await nextFrame();\n  const embedRes = await embed(drawArea, spec, embedOpts);\n  instances.set(drawArea, {\n    view: embedRes.view,\n    lastOptions: options,\n  });\n}\n\nconst defaultOpts = {\n  xLabel: '',\n  yLabel: '',\n  xType: 'ordinal',\n  yType: 'quantitative',\n  fontSize: 11,\n};\n\n// We keep a map of containers to chart instances in order to reuse the\n// instance where possible.\nconst instances: Map<HTMLElement, InstanceInfo> =\n    new Map<HTMLElement, InstanceInfo>();\n\ninterface InstanceInfo {\n  // tslint:disable-next-line:no-any\n  view: any;\n  lastOptions: BarChartOpts;\n}\n"]}