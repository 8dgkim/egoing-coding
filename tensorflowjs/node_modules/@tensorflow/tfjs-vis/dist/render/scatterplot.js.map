{"version":3,"file":"scatterplot.js","sourceRoot":"","sources":["../../src/render/scatterplot.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport embed, {Mode, VisualizationSpec} from 'vega-embed';\n\nimport {Drawable, Point2D, XYPlotData, XYPlotOptions} from '../types';\nimport {getDefaultHeight, getDefaultWidth} from '../util/dom';\nimport {assert} from '../util/utils';\nimport {getDrawArea} from './render_utils';\n\n/**\n * Renders a scatter plot\n *\n * ```js\n * const series1 = Array(100).fill(0)\n *   .map(y => Math.random() * 100 - (Math.random() * 50))\n *   .map((y, x) => ({ x, y, }));\n *\n * const series2 = Array(100).fill(0)\n *   .map(y => Math.random() * 100 - (Math.random() * 150))\n *   .map((y, x) => ({ x, y, }));\n *\n * const series = ['First', 'Second'];\n * const data = { values: [series1, series2], series }\n *\n * const surface = { name: 'Scatterplot', tab: 'Charts' };\n * tfvis.render.scatterplot(surface, data);\n * ```\n *\n * @doc {heading: 'Charts', namespace: 'render'}\n */\nexport async function scatterplot(\n    container: Drawable, data: XYPlotData,\n    opts: XYPlotOptions = {}): Promise<void> {\n  let _values = data.values;\n  const _series = data.series == null ? [] : data.series;\n\n  // Nest data if necessary before further processing\n  _values = Array.isArray(_values[0]) ? _values as Point2D[][] :\n                                        [_values] as Point2D[][];\n\n  const values: Point2D[] = [];\n  _values.forEach((seriesData, i) => {\n    const seriesName: string =\n        _series[i] != null ? _series[i] : `Series ${i + 1}`;\n    const seriesVals =\n        seriesData.map(v => Object.assign({}, v, {series: seriesName}));\n    values.push(...seriesVals);\n  });\n\n  if (opts.seriesColors != null) {\n    assert(\n        opts.seriesColors.length === _values.length,\n        'Must have an equal number of series colors as there are data series');\n  }\n\n  const drawArea = getDrawArea(container);\n  const options = Object.assign({}, defaultOpts, opts);\n\n  const embedOpts = {\n    actions: false,\n    mode: 'vega-lite' as Mode,\n    defaultStyle: false,\n  };\n\n  const xDomain = (): {}|undefined => {\n    if (options.zoomToFit) {\n      return {'zero': false};\n    } else if (options.xAxisDomain != null) {\n      return {'domain': options.xAxisDomain};\n    }\n    return undefined;\n  };\n\n  const yDomain = (): {}|undefined => {\n    if (options.zoomToFit) {\n      return {'zero': false};\n    } else if (options.yAxisDomain != null) {\n      return {'domain': options.yAxisDomain};\n    }\n    return undefined;\n  };\n\n  const spec: VisualizationSpec = {\n    'width': options.width || getDefaultWidth(drawArea),\n    'height': options.height || getDefaultHeight(drawArea),\n    'padding': 0,\n    'autosize': {\n      'type': 'fit',\n      'contains': 'padding',\n      'resize': true,\n    },\n    'config': {\n      'axis': {\n        'labelFontSize': options.fontSize,\n        'titleFontSize': options.fontSize,\n      },\n      'text': {'fontSize': options.fontSize},\n      'legend': {\n        'labelFontSize': options.fontSize,\n        'titleFontSize': options.fontSize,\n      }\n    },\n    //@ts-ignore\n    'data': {\n      'values': values,\n    },\n    'mark': {\n      'type': 'point',\n      'clip': true,\n      'tooltip': {'content': 'data'},\n    },\n    'encoding': {\n      'x': {\n        'field': 'x',\n        'type': options.xType,\n        'title': options.xLabel,\n        'scale': xDomain(),\n      },\n      'y': {\n        'field': 'y',\n        'type': options.yType,\n        'title': options.yLabel,\n        'scale': yDomain(),\n      },\n      'color': {\n        'field': 'series',\n        'type': 'nominal',\n        'scale': {\n          'range': options.seriesColors,\n        }\n      },\n      'shape': {\n        'field': 'series',\n        'type': 'nominal',\n      }\n    },\n  };\n\n  await embed(drawArea, spec, embedOpts);\n  return Promise.resolve();\n}\n\nconst defaultOpts = {\n  xLabel: 'x',\n  yLabel: 'y',\n  xType: 'quantitative',\n  yType: 'quantitative',\n  zoomToFit: false,\n  fontSize: 11,\n};\n"]}