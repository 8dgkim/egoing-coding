{"version":3,"file":"render_utils_test.js","sourceRoot":"","sources":["../../src/render/render_utils_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {visor} from '../index';\nimport {getDrawArea, shallowEquals} from './render_utils';\n\ndescribe('shallowEqual', () => {\n  beforeEach(() => {\n    document.body.innerHTML = '<div id=\"container\"></div>';\n  });\n\n  it('returns true for similar objects', async () => {\n    const a = {\n      stringProp: 'astring',\n      numProp: 55,\n      boolProp: true,\n    };\n\n    const b = {\n      stringProp: 'astring',\n      boolProp: true,\n      numProp: 55,\n    };\n\n    expect(shallowEquals(a, b)).toBe(true);\n  });\n\n  it('returns false for different objects', async () => {\n    const a = {\n      stringProp: 'astring',\n      numProp: 55,\n      boolProp: false,\n    };\n\n    const b = {\n      stringProp: 'astring',\n      numProp: 55,\n      boolProp: true,\n    };\n\n    expect(shallowEquals(a, b)).toBe(false);\n  });\n\n  it('returns true for similar objects (array ref)', async () => {\n    // tslint:disable-next-line:no-any\n    const ref: any[] = [];\n\n    const a = {\n      stringProp: 'astring',\n      numProp: 55,\n      refProp: ref,\n    };\n\n    const b = {\n      numProp: 55,\n      stringProp: 'astring',\n      refProp: ref,\n    };\n\n    expect(shallowEquals(a, b)).toBe(true);\n  });\n});\n\ndescribe('getDrawArea', () => {\n  beforeEach(() => {\n    document.body.innerHTML = '<div id=\"container\"></div>';\n  });\n\n  it('works with HTMLElement', async () => {\n    const el = document.getElementById('container');\n    expect(getDrawArea(el)).toEqual(el);\n  });\n\n  it('works with a surface', async () => {\n    const surface = visor().surface({name: 'test'});\n    expect(getDrawArea(surface)).toEqual(surface.drawArea);\n  });\n\n  it('fails with other stuff', async () => {\n    const surface = visor().surface({name: 'test'});\n    //@ts-ignore\n    expect(() => getDrawArea('not-a-surface')).toThrow();\n  });\n});\n"]}