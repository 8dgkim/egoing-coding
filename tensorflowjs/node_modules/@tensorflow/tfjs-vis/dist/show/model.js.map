{"version":3,"file":"model.js","sourceRoot":"","sources":["../../src/show/model.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\n// TODO use type only imports for these types once we are on a version of\n// ts that supports this.\n// https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html#type-only-imports-and-export\n// tslint:disable-next-line: no-imports-from-dist\nimport {Layer} from '@tensorflow/tfjs-layers/dist/engine/topology';\n// tslint:disable-next-line: no-imports-from-dist\nimport {LayersModel} from '@tensorflow/tfjs-layers/dist/engine/training';\n\nimport {histogram} from '../render/histogram';\nimport {getDrawArea} from '../render/render_utils';\nimport {table} from '../render/table';\nimport {Drawable, HistogramStats} from '../types';\nimport {subSurface} from '../util/dom';\nimport {tensorStats} from '../util/math';\n\n/**\n * Renders a summary of a tf.Model. Displays a table with layer information.\n *\n * ```js\n * const model = tf.sequential({\n *  layers: [\n *    tf.layers.dense({inputShape: [784], units: 32, activation: 'relu'}),\n *    tf.layers.dense({units: 10, activation: 'softmax'}),\n *  ]\n * });\n *\n * const surface = { name: 'Model Summary', tab: 'Model Inspection'};\n * tfvis.show.modelSummary(surface, model);\n * ```\n *\n * @doc {\n *  heading: 'Models & Tensors',\n *  subheading: 'Model Inspection',\n *  namespace: 'show'\n * }\n */\nexport async function modelSummary(container: Drawable, model: LayersModel) {\n  const drawArea = getDrawArea(container);\n  const summary = getModelSummary(model);\n\n  const headers = [\n    'Layer Name',\n    'Output Shape',\n    '# Of Params',\n    'Trainable',\n  ];\n\n  const values = summary.layers.map(\n      l =>\n          [l.name,\n           l.outputShape,\n           l.parameters,\n           l.trainable,\n  ]);\n\n  table(drawArea, {headers, values});\n}\n\n/**\n * Renders summary information about a layer and a histogram of parameters in\n * that layer.\n *\n * ```js\n * const model = tf.sequential({\n *  layers: [\n *    tf.layers.dense({inputShape: [784], units: 32, activation: 'relu'}),\n *    tf.layers.dense({units: 10, activation: 'softmax'}),\n *  ]\n * });\n *\n * const surface = { name: 'Layer Summary', tab: 'Model Inspection'};\n * tfvis.show.layer(surface, model.getLayer(undefined, 1));\n * ```\n *\n * @doc {\n *  heading: 'Models & Tensors',\n *  subheading: 'Model Inspection',\n *  namespace: 'show'\n * }\n */\nexport async function layer(container: Drawable, layer: Layer) {\n  const drawArea = getDrawArea(container);\n  const details = await getLayerDetails(layer);\n\n  const headers = [\n    'Weight Name',\n    'Shape',\n    'Min',\n    'Max',\n    '# Params',\n    '# Zeros',\n    '# NaNs',\n    '# Infinity',\n  ];\n\n  // Show layer summary\n  const weightsInfoSurface = subSurface(drawArea, 'layer-weights-info');\n  const detailValues = details.map(\n      l =>\n          [l.name, l.shape, l.stats.min, l.stats.max, l.weight.size,\n           l.stats.numZeros, l.stats.numNans, l.stats.numInfs]);\n\n  table(weightsInfoSurface, {headers, values: detailValues});\n\n  const histogramSelectorSurface = subSurface(drawArea, 'select-layer');\n  const layerValuesHistogram = subSurface(drawArea, 'param-distribution');\n\n  const handleSelection = async (layerName: string) => {\n    const layer = details.filter(d => d.name === layerName)[0];\n    const weights = await layer.weight.data();\n\n    histogram(\n        layerValuesHistogram, weights, {height: 150, width: 460, stats: false});\n  };\n\n  addHistogramSelector(\n      details.map(d => d.name), histogramSelectorSurface, handleSelection);\n}\n\n//\n// Helper functions\n//\n\nfunction getModelSummary(model: LayersModel) {\n  return {\n    layers: model.layers.map(getLayerSummary),\n  };\n}\n\n/*\n * Gets summary information/metadata about a layer.\n */\nfunction getLayerSummary(layer: Layer): LayerSummary {\n  let outputShape: string;\n  if (Array.isArray(layer.outputShape[0])) {\n    const shapes = (layer.outputShape as number[][]).map(s => formatShape(s));\n    outputShape = `[${shapes.join(', ')}]`;\n  } else {\n    outputShape = formatShape(layer.outputShape as number[]);\n  }\n\n  return {\n    name: layer.name,\n    trainable: layer.trainable,\n    parameters: layer.countParams(),\n    outputShape,\n  };\n}\n\ninterface LayerSummary {\n  name: string;\n  trainable: boolean;\n  parameters: number;\n  outputShape: string;\n}\n\n/*\n * Gets summary stats and shape for all weights in a layer.\n */\nasync function getLayerDetails(layer: Layer): Promise<Array<\n    {name: string, stats: HistogramStats, shape: string, weight: tf.Tensor}>> {\n  const weights = layer.getWeights();\n  const layerVariables = layer.weights;\n  const statsPromises = weights.map(tensorStats);\n  const stats = await Promise.all(statsPromises);\n  const shapes = weights.map(w => w.shape);\n  return weights.map((weight, i) => ({\n                       name: layerVariables[i].name,\n                       stats: stats[i],\n                       shape: formatShape(shapes[i]),\n                       weight,\n                     }));\n}\n\nfunction formatShape(shape: number[]): string {\n  const oShape: Array<number|string> = shape.slice();\n  if (oShape.length === 0) {\n    return 'Scalar';\n  }\n  if (oShape[0] === null) {\n    oShape[0] = 'batch';\n  }\n  return `[${oShape.join(',')}]`;\n}\n\nfunction addHistogramSelector(\n    items: string[], parent: HTMLElement,\n    // tslint:disable-next-line:no-any\n    selectionHandler: (item: string) => any) {\n  const select = `\n    <select>\n      ${items.map((i) => `<option value=${i}>${i}</option>`)}\n    </select>\n  `;\n\n  const button = `<button>Show Values Distribution for:</button>`;\n  const content = `<div>${button}${select}</div>`;\n\n  parent.innerHTML = content;\n\n  // Add listeners\n  const buttonEl = parent.querySelector('button');\n  const selectEl = parent.querySelector('select');\n\n  buttonEl.addEventListener('click', () => {\n    selectionHandler(selectEl.selectedOptions[0].label);\n  });\n}\n"]}